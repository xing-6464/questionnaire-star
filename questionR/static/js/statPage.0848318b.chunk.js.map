{"version":3,"file":"static/js/statPage.0848318b.chunk.js","mappings":"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","sources":["webpack://questionnaire-star/./src/pages/question/Stat/index.module.scss?6995","webpack://questionnaire-star/./src/pages/question/Stat/StatHeader.module.scss?a5ff","pages/question/Stat/StatHeader.tsx","webpack://questionnaire-star/./src/pages/question/Stat/ComponentList.module.scss?3dd2","pages/question/Stat/ComponentList.tsx","components/Loading.tsx","pages/question/Stat/PageStat.tsx","services/stat.ts","pages/question/Stat/ChartStat.tsx","pages/question/Stat/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Stat_container__jXvAP\",\"content-wrapper\":\"Stat_content-wrapper__RP46h\",\"content\":\"Stat_content__Pyk3M\",\"left\":\"Stat_left__UxP5F\",\"main\":\"Stat_main__YPKSS\",\"right\":\"Stat_right__rKDCo\"};","// extracted by mini-css-extract-plugin\nexport default {\"header-wrapper\":\"StatHeader_header-wrapper__BPbno\",\"header\":\"StatHeader_header__sWITa\",\"left\":\"StatHeader_left__-k0g+\",\"right\":\"StatHeader_right__6sqyK\",\"main\":\"StatHeader_main__IrU3a\"};","import React, { useMemo } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport styles from './StatHeader.module.scss'\r\nimport { Button, Input, InputRef, Popover, QRCode, Space, Tooltip, Typography, message } from 'antd'\r\nimport { CopyOutlined, LeftOutlined, QrcodeOutlined } from '@ant-design/icons'\r\nimport useGetPageInfo from '../../../hooks/useGetPageInfo'\r\n\r\nconst { Title } = Typography\r\n\r\nfunction StatHeader() {\r\n  const nav = useNavigate()\r\n  const { id } = useParams()\r\n\r\n  const { title, isPublished } = useGetPageInfo()\r\n\r\n  // 拷贝链接\r\n  const urlInputRef = React.useRef<InputRef>(null)\r\n  function copy() {\r\n    const elem = urlInputRef.current\r\n    if (elem == null) return\r\n    elem.select()\r\n    document.execCommand('copy') // 执行浏览器复制命令\r\n    message.success('拷贝成功')\r\n  }\r\n\r\n  // function genLinkAndQRCodeElem() {\r\n  //   if (!isPublished) return null\r\n\r\n  //   // generate QR code and link\r\n  //   const url = `http://localhost:3000/question/${id}`\r\n\r\n  //   const QRCodeElem = (\r\n  //     <div style={{ textAlign: 'center' }}>\r\n  //       <QRCode value={url} size={150} />\r\n  //     </div>\r\n  //   )\r\n\r\n  //   return (\r\n  //     <Space>\r\n  //       <Input value={url} style={{ width: '300px' }} ref={urlInputRef} />\r\n  //       <Tooltip title=\"拷贝链接\">\r\n  //         <Button icon={<CopyOutlined />} onClick={copy} />\r\n  //       </Tooltip>\r\n  //       <Popover content={QRCodeElem}>\r\n  //         <Button icon={<QrcodeOutlined />} />\r\n  //       </Popover>\r\n  //     </Space>\r\n  //   )\r\n  // }\r\n\r\n  // 使用 useMemo 优化性能\r\n  const LinkAndQRCodeElem = useMemo(() => {\r\n    if (!isPublished) return null\r\n\r\n    // generate QR code and link\r\n    const url = `http://question.ixing.xyz/question/${id}`\r\n\r\n    const QRCodeElem = (\r\n      <div style={{ textAlign: 'center' }}>\r\n        <QRCode value={url} size={150} />\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <Space>\r\n        <Input value={url} style={{ width: '300px' }} ref={urlInputRef} />\r\n        <Tooltip title=\"拷贝链接\">\r\n          <Button\r\n            icon={\r\n              <CopyOutlined onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined} />\r\n            }\r\n            onClick={copy}\r\n          />\r\n        </Tooltip>\r\n        <Popover content={QRCodeElem}>\r\n          <Button\r\n            icon={\r\n              <QrcodeOutlined onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined} />\r\n            }\r\n          />\r\n        </Popover>\r\n      </Space>\r\n    )\r\n  }, [id, isPublished])\r\n\r\n  return (\r\n    <div className={styles['header-wrapper']}>\r\n      <div className={styles.header}>\r\n        <div className={styles.left}>\r\n          <Space>\r\n            <Button\r\n              type=\"link\"\r\n              icon={\r\n                <LeftOutlined onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined} />\r\n              }\r\n              onClick={() => nav(-1)}\r\n            >\r\n              返回\r\n            </Button>\r\n            <Title>{title}</Title>\r\n          </Space>\r\n        </div>\r\n        <div className={styles.main}>{LinkAndQRCodeElem}</div>\r\n        <div className={styles.right}>\r\n          <Button type=\"primary\" onClick={() => nav(`/question/edit/${id}`)}>\r\n            编辑问卷\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatHeader\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ComponentList_container__HTUv4\",\"component-wrapper\":\"ComponentList_component-wrapper__hRcyH\",\"selected\":\"ComponentList_selected__qWbqI\",\"component\":\"ComponentList_component__yKunt\"};","import React from 'react'\r\nimport useGetComponentInfo from '../../../hooks/useGetComponentInfo'\r\n\r\nimport styles from './ComponentList.module.scss'\r\nimport { getComponentConfByType } from '../../../components/QuestionComponents'\r\nimport classNames from 'classnames'\r\nimport type { PropsType } from './types'\r\n\r\nfunction ComponentList(props: PropsType) {\r\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\r\n  const { componentList } = useGetComponentInfo()\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {componentList\r\n        .filter(c => !c.isHidden)\r\n        .map(component => {\r\n          const { fe_id, props, type } = component\r\n\r\n          const componentConf = getComponentConfByType(type)\r\n          if (componentConf == null) return null\r\n          const { Component } = componentConf\r\n\r\n          const wrapperDefaultClassName = styles['component-wrapper']\r\n          const selectedClassName = styles.selected\r\n          const wrapperClassName = classNames({\r\n            [wrapperDefaultClassName]: true,\r\n            [selectedClassName]: fe_id === selectedComponentId,\r\n          })\r\n\r\n          return (\r\n            <div\r\n              className={wrapperClassName}\r\n              key={fe_id}\r\n              onClick={() => {\r\n                setSelectedComponentId(fe_id)\r\n                setSelectedComponentType(type)\r\n              }}\r\n            >\r\n              <div className={styles.component}>\r\n                <Component {...props} />\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ComponentList\r\n","import React from 'react'\r\nimport { Spin } from 'antd'\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '60px' }}>\r\n      <Spin />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport type { PropsType } from './types'\r\nimport { useRequest } from 'ahooks'\r\nimport { getQuestionStatListService } from '../../../services/stat'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Pagination, Table, Typography } from 'antd'\r\nimport useGetComponentInfo from '../../../hooks/useGetComponentInfo'\r\nimport Loading from '../../../components/Loading'\r\nimport { STAT_PAGE_SIZE } from '../../../constant'\r\n\r\nconst { Title } = Typography\r\n\r\nfunction PageStat(props: PropsType) {\r\n  const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props\r\n  const { id = '' } = useParams()\r\n\r\n  const [total, setTotal] = useState()\r\n  const [list, setList] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [pageSize, setPageSize] = useState(STAT_PAGE_SIZE)\r\n  const { loading } = useRequest(\r\n    async () => {\r\n      const res = await getQuestionStatListService(id, { page, pageSize })\r\n      return res\r\n    },\r\n    {\r\n      refreshDeps: [id, page, pageSize],\r\n      onSuccess(res) {\r\n        const { total, list = [] } = res\r\n        setTotal(total)\r\n        setList(list)\r\n      },\r\n    }\r\n  )\r\n\r\n  const { componentList } = useGetComponentInfo()\r\n  const columns = componentList.map(c => {\r\n    const { fe_id, title, type, props = {} } = c\r\n\r\n    const colTitle = props.title || title\r\n\r\n    return {\r\n      // title: colTitle,\r\n      title: (\r\n        <div\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => {\r\n            setSelectedComponentId(fe_id)\r\n            setSelectedComponentType(type)\r\n          }}\r\n        >\r\n          <span style={{ color: fe_id === selectedComponentId ? '#1890ff' : 'inherit' }}>\r\n            {colTitle}\r\n          </span>\r\n        </div>\r\n      ),\r\n      dataIndex: fe_id,\r\n    }\r\n  })\r\n  const dataSource = list.map((i: any) => ({ ...i, key: i._id }))\r\n  const TableElement = (\r\n    <>\r\n      <Table columns={columns} dataSource={dataSource} pagination={false}></Table>\r\n      <div style={{ textAlign: 'center', marginTop: '18px' }}>\r\n        <Pagination\r\n          total={total}\r\n          pageSize={pageSize}\r\n          current={page}\r\n          onChange={page => setPage(page)}\r\n          onShowSizeChange={(page, pageSize) => {\r\n            setPage(page)\r\n            setPageSize(pageSize)\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Title level={3}>答卷数量：{!loading && total}</Title>\r\n      {loading && <Loading />}\r\n      {!loading && TableElement}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageStat\r\n","import axios, { type ResDataType } from './ajax'\r\n\r\n// 获取问卷列表\r\nexport async function getQuestionStatListService(\r\n  questionId: string,\r\n  opt: { page: number; pageSize: number }\r\n): Promise<ResDataType> {\r\n  const url = `/api/stat/${questionId}`\r\n  const data = (await axios.get(url, { params: opt })) as ResDataType\r\n\r\n  return data\r\n}\r\n\r\n// 获取组件的统计数据汇总\r\nexport async function getComponentStatService(\r\n  questionId: string,\r\n  componentId: string\r\n): Promise<ResDataType> {\r\n  const url = `/api/stat/${questionId}/${componentId}`\r\n  const data = (await axios.get(url)) as ResDataType\r\n\r\n  return data\r\n}\r\n","import { useRequest } from 'ahooks'\r\nimport { Typography } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { getComponentStatService } from '../../../services/stat'\r\nimport { useParams } from 'react-router-dom'\r\nimport { getComponentConfByType } from '../../../components/QuestionComponents'\r\n\r\nconst { Title } = Typography\r\n\r\ntype PropsType = {\r\n  selectedComponentId: string\r\n  selectedComponentType: string\r\n}\r\n\r\nfunction ChartStat(props: PropsType) {\r\n  const { selectedComponentId, selectedComponentType } = props\r\n  const { id = '' } = useParams()\r\n  const [stat, setStat] = React.useState([])\r\n\r\n  const { run } = useRequest(\r\n    async (questionId, componentId) => await getComponentStatService(questionId, componentId),\r\n    {\r\n      manual: true,\r\n      onSuccess(res) {\r\n        setStat(res.stat)\r\n      },\r\n    }\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (selectedComponentId) run(id, selectedComponentId)\r\n  }, [id, selectedComponentId])\r\n\r\n  // 生成统计图表\r\n  function genStatElem() {\r\n    if (!selectedComponentId) return <div>未中组件</div>\r\n    //  判断组件类型\r\n    const { StatComponent } = getComponentConfByType(selectedComponentType) || {}\r\n    if (!StatComponent) return <div>该组件无统计图表</div>\r\n    return <StatComponent stat={stat} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Title level={3}>统计列表</Title>\r\n      <div>{genStatElem()}</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChartStat\r\n","import React, { FC, useState } from 'react'\r\nimport useLoadQuestionData from '../../../hooks/useLoadQuestionData'\r\nimport { Button, Result, Spin } from 'antd'\r\nimport useGetPageInfo from '../../../hooks/useGetPageInfo'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useTitle } from 'ahooks'\r\nimport style from './index.module.scss'\r\nimport StatHeader from './StatHeader'\r\nimport ComponentList from './ComponentList'\r\nimport PageStat from './PageStat'\r\nimport ChartStat from './ChartStat'\r\n\r\nconst Stat: FC = () => {\r\n  const nav = useNavigate()\r\n  const { loading } = useLoadQuestionData()\r\n  const { isPublished } = useGetPageInfo()\r\n\r\n  // 状态提升 id, type\r\n  const [selectedComponentId, setSelectedComponentId] = useState('')\r\n  const [selectedComponentType, setSelectedComponentType] = useState('')\r\n\r\n  // 修改标题\r\n  useTitle('问卷统计')\r\n\r\n  const Loading = () => {\r\n    return (\r\n      <div style={{ textAlign: 'center', marginTop: '60px' }}>\r\n        <Spin />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const genElement = () => {\r\n    if (typeof isPublished === 'boolean' && !isPublished) {\r\n      return (\r\n        <div style={{ flex: 1 }}>\r\n          <Result\r\n            status=\"warning\"\r\n            title=\"该页面未发布\"\r\n            extra={\r\n              <Button type=\"primary\" onClick={() => nav(-1)}>\r\n                返回\r\n              </Button>\r\n            }\r\n          ></Result>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={style.left}>\r\n          <ComponentList\r\n            selectedComponentId={selectedComponentId}\r\n            setSelectedComponentId={setSelectedComponentId}\r\n            setSelectedComponentType={setSelectedComponentType}\r\n          />\r\n        </div>\r\n        <div className={style.main}>\r\n          <PageStat\r\n            selectedComponentId={selectedComponentId}\r\n            setSelectedComponentId={setSelectedComponentId}\r\n            setSelectedComponentType={setSelectedComponentType}\r\n          />\r\n        </div>\r\n        <div className={style.right}>\r\n          <ChartStat\r\n            selectedComponentId={selectedComponentId}\r\n            selectedComponentType={selectedComponentType}\r\n          />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <StatHeader />\r\n      <div className={style['content-wrapper']}>\r\n        {loading ? <Loading /> : <div className={style.content}>{genElement()}</div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stat\r\n"],"names":["Title","Typography","nav","useNavigate","id","useParams","title","isPublished","useGetPageInfo","urlInputRef","React","copy","elem","current","select","document","execCommand","message","success","LinkAndQRCodeElem","useMemo","url","concat","QRCodeElem","_jsx","style","textAlign","children","QRCode","value","size","_jsxs","Space","Input","width","ref","Tooltip","Button","icon","CopyOutlined","onPointerEnterCapture","undefined","onPointerLeaveCapture","onClick","Popover","content","QrcodeOutlined","className","styles","type","LeftOutlined","props","selectedComponentId","setSelectedComponentId","setSelectedComponentType","componentList","useGetComponentInfo","filter","c","isHidden","map","component","fe_id","componentConf","getComponentConfByType","Component","wrapperDefaultClassName","selectedClassName","wrapperClassName","classNames","Loading","marginTop","Spin","total","setTotal","useState","list","setList","page","setPage","pageSize","setPageSize","STAT_PAGE_SIZE","loading","useRequest","async","questionId","opt","axios","get","params","getQuestionStatListService","refreshDeps","onSuccess","res","columns","colTitle","cursor","color","dataIndex","dataSource","i","key","_id","TableElement","_Fragment","Table","pagination","Pagination","onChange","onShowSizeChange","level","selectedComponentType","stat","setStat","run","componentId","getComponentStatService","manual","useEffect","StatComponent","genStatElem","Stat","useLoadQuestionData","useTitle","StatHeader","ComponentList","PageStat","ChartStat","flex","Result","status","extra"],"sourceRoot":""}